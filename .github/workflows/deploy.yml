name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install -g html-minifier-terser

      - name: Minify HTML
        run: |
          html-minifier-terser \
            --collapse-whitespace \
            --remove-comments \
            --minify-css true \
            --minify-js true \
            index.html -o index.min.html

      - name: Prepare build artifacts
        run: |
          mkdir -p dist
          cp index.min.html dist/index.html

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

      - name: Build Summary
        run: |
          ORIGINAL_SIZE=$(wc -c < index.html)
          MINIFIED_SIZE=$(wc -c < index.min.html)
          REDUCTION=$(( (ORIGINAL_SIZE - MINIFIED_SIZE) * 100 / ORIGINAL_SIZE ))
          echo "BUILD: PASSED | Size reduction: ${REDUCTION}% | Build: ${{ github.run_number }}"

  test:
    name: Test 
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Validate HTML structure
        run: |
          if [ ! -f "index.html" ]; then
            echo "ERROR: index.html not found"
            exit 1
          fi
          
          if ! grep -q "<!DOCTYPE html>" index.html; then
            echo "ERROR: Missing DOCTYPE declaration"
            exit 1
          fi
          
          echo "HTML structure validation passed"

      - name: Check for broken links
        run: |
          echo "Checking all external links..."
          BROKEN_LINKS=0
          
          LINKS=$(grep -o 'href="http[^"]*"' index.html | sed 's/href="//;s/"//' || true)
          
          if [ -z "$LINKS" ]; then
            echo "No external links found to check"
          else
            for link in $LINKS; do
              echo "Checking: $link"
              STATUS=$(curl -o /dev/null -s -w "%{http_code}" -L --max-time 10 "$link" || echo "000")
              
              if [ "$STATUS" = "200" ]; then
                echo "  ✓ OK (HTTP $STATUS)"
              else
                echo "  ✗ BROKEN (HTTP $STATUS)"
                BROKEN_LINKS=$((BROKEN_LINKS + 1))
              fi
            done
          fi
          
          if [ $BROKEN_LINKS -gt 0 ]; then
            echo "ERROR: Found $BROKEN_LINKS broken link(s)"
            exit 1
          fi
          
          echo "All links are valid"

      - name: Test Summary
        run: |
          echo "TESTS: PASSED | All checks completed successfully"

  deploy:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment summary
        run: |
          echo "DEPLOY: SUCCESS | URL: ${{ steps.deployment.outputs.page_url }}"